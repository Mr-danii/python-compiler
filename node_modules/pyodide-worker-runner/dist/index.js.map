{"version":3,"file":"index.js","mappings":"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","sources":["webpack://pyodide-worker-runner/webpack/universalModuleDefinition","webpack://pyodide-worker-runner/./lib/pyodide_worker_runner.py","webpack://pyodide-worker-runner/./node_modules/retry/index.js","webpack://pyodide-worker-runner/./node_modules/retry/lib/retry.js","webpack://pyodide-worker-runner/./node_modules/retry/lib/retry_operation.js","webpack://pyodide-worker-runner/external umd \"comlink\"","webpack://pyodide-worker-runner/external umd \"comsync\"","webpack://pyodide-worker-runner/external umd \"pyodide\"","webpack://pyodide-worker-runner/webpack/bootstrap","webpack://pyodide-worker-runner/webpack/runtime/define property getters","webpack://pyodide-worker-runner/webpack/runtime/hasOwnProperty shorthand","webpack://pyodide-worker-runner/webpack/runtime/make namespace object","webpack://pyodide-worker-runner/./node_modules/p-retry/index.js","webpack://pyodide-worker-runner/./lib/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"comsync\"), require(\"comlink\"), require(\"pyodide\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"comsync\", \"comlink\", \"pyodide\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pyodide-worker-runner\"] = factory(require(\"comsync\"), require(\"comlink\"), require(\"pyodide\"));\n\telse\n\t\troot[\"pyodide-worker-runner\"] = factory(root[\"comsync\"], root[\"comlink\"], root[\"pyodide\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__422__, __WEBPACK_EXTERNAL_MODULE__272__, __WEBPACK_EXTERNAL_MODULE__28__) => {\nreturn ","export default \"import importlib\\nimport sys\\nfrom typing import Callable, Literal, Union, TypedDict\\n\\ntry:\\n    from pyodide.code import find_imports  # noqa\\nexcept ImportError:\\n    from pyodide import find_imports  # noqa\\n\\nimport pyodide_js  # noqa\\n\\nsys.setrecursionlimit(400)\\n\\n\\nclass InstallEntry(TypedDict):\\n    module: str\\n    package: str\\n\\n\\ndef find_imports_to_install(imports: list[str]) -> list[InstallEntry]:\\n    \\\"\\\"\\\"\\n    Given a list of module names being imported, return a list of dicts\\n    representing the packages that need to be installed to import those modules.\\n    The returned list will only contain modules that aren't already installed.\\n    Each returned dict has the following keys:\\n      - module: the name of the module being imported\\n      - package: the name of the package that needs to be installed\\n    \\\"\\\"\\\"\\n    try:\\n        to_package_name = pyodide_js._module._import_name_to_package_name.to_py()\\n    except AttributeError:\\n        to_package_name = pyodide_js._api._import_name_to_package_name.to_py()\\n\\n    to_install: list[InstallEntry] = []\\n    for module in imports:\\n        try:\\n            importlib.import_module(module)\\n        except ModuleNotFoundError:\\n            to_install.append(\\n                dict(\\n                    module=module,\\n                    package=to_package_name.get(module, module),\\n                )\\n            )\\n    return to_install\\n\\n\\nasync def install_imports(\\n    source_code_or_imports: Union[str, list[str]],\\n    message_callback: Callable[\\n        [\\n            Literal[\\n                \\\"loading_all\\\",\\n                \\\"loaded_all\\\",\\n                \\\"loading_one\\\",\\n                \\\"loaded_one\\\",\\n                \\\"loading_micropip\\\",\\n                \\\"loaded_micropip\\\",\\n            ],\\n            Union[InstallEntry, list[InstallEntry]],\\n        ],\\n        None,\\n    ] = lambda event_type, data: None,\\n):\\n    \\\"\\\"\\\"\\n    Accepts a string of Python source code or a list of module names being imported.\\n    Installs any packages that need to be installed to import those modules,\\n    using micropip, which may also be installed if needed.\\n    If the package is not specially built for Pyodide, it must be available on PyPI\\n    as a pure Python wheel file.\\n    If the `message_callback` argument is provided, it will be called with an\\n    event type and data about the packages being installed.\\n    The event types start with `loading_` before installation, and `loaded_` after.\\n    The data is either a single dict representing the package being installed,\\n    or a list of all the packages being installed.\\n    The events are:\\n        - loading/loaded_all, with a list of all the packages being installed.\\n        - loading/loaded_one, with a dict for a single package.\\n        - loading/loaded_micropip, with a dict for the special micropip package.\\n    \\\"\\\"\\\"\\n    if isinstance(source_code_or_imports, str):\\n        try:\\n            imports: list[str] = find_imports(source_code_or_imports)\\n        except SyntaxError:\\n            return\\n    else:\\n        imports: list[str] = source_code_or_imports\\n\\n    to_install = find_imports_to_install(imports)\\n    if to_install:\\n        message_callback(\\\"loading_all\\\", to_install)\\n        try:\\n            import micropip  # noqa\\n        except ModuleNotFoundError:\\n            micropip_entry = dict(module=\\\"micropip\\\", package=\\\"micropip\\\")\\n            message_callback(\\\"loading_micropip\\\", micropip_entry)\\n            await pyodide_js.loadPackage(\\\"micropip\\\")\\n            import micropip  # noqa\\n\\n            message_callback(\\\"loaded_micropip\\\", micropip_entry)\\n\\n        for entry in to_install:\\n            message_callback(\\\"loading_one\\\", entry)\\n            await micropip.install(entry[\\\"package\\\"])\\n            message_callback(\\\"loaded_one\\\", entry)\\n        message_callback(\\\"loaded_all\\\", to_install)\\n\";","module.exports = require('./lib/retry');","var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n","function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__272__;","module.exports = __WEBPACK_EXTERNAL_MODULE__422__;","module.exports = __WEBPACK_EXTERNAL_MODULE__28__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import retry from 'retry';\n\nconst networkErrorMsgs = new Set([\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed', // `cross-fetch`\n]);\n\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.has(errorMessage);\n\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new Error(errorMessage)\n\t: new DOMException(errorMessage);\n\nexport default async function pRetry(input, options) {\n\treturn new Promise((resolve, reject) => {\n\t\toptions = {\n\t\t\tonFailedAttempt() {},\n\t\t\tretries: 10,\n\t\t\t...options,\n\t\t};\n\n\t\tconst operation = retry.operation(options);\n\n\t\toperation.attempt(async attemptNumber => {\n\t\t\ttry {\n\t\t\t\tresolve(await input(attemptNumber));\n\t\t\t} catch (error) {\n\t\t\t\tif (!(error instanceof Error)) {\n\t\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof AbortError) {\n\t\t\t\t\toperation.stop();\n\t\t\t\t\treject(error.originalError);\n\t\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\t\toperation.stop();\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\t\treject(operation.mainError());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (options.signal && !options.signal.aborted) {\n\t\t\toptions.signal.addEventListener('abort', () => {\n\t\t\t\toperation.stop();\n\t\t\t\tconst reason = options.signal.reason === undefined\n\t\t\t\t\t? getDOMException('The operation was aborted.')\n\t\t\t\t\t: options.signal.reason;\n\t\t\t\treject(reason instanceof Error ? reason : getDOMException(reason));\n\t\t\t}, {\n\t\t\t\tonce: true,\n\t\t\t});\n\t\t}\n\t});\n}\n","import pRetry from \"p-retry\";\nimport {SyncClient, syncExpose, SyncExtras} from \"comsync\";\nimport * as Comlink from \"comlink\";\nimport {loadPyodide, PyodideInterface, version as npmVersion} from \"pyodide\";\n\nconst pyodide_worker_runner_contents = require(\"!!raw-loader!./pyodide_worker_runner.py\")\n  .default;\n\nexport type PyodideLoader = () => Promise<PyodideInterface>;\nexport interface PackageOptions {\n  url: string; // URL to fetch the package from\n\n  // These arguments are passed to `pyodide.unpackArchive`\n  // (https://pyodide.org/en/stable/usage/api/js-api.html#pyodide.unpackArchive)\n  format: string; // By default the options are 'bztar', 'gztar', 'tar', 'zip', and 'wheel'\n  extractDir?: string; // Defaults to /tmp/\n}\n\n/**\n * Loads the Pyodide module from the official CDN as suggested in\n * https://pyodide.org/en/stable/usage/quickstart.html#setup.\n * To load a specific version, pass a string such as \"1.2.3\" as the argument.\n * By default, uses `pyodide.version`, i.e. the version you have installed from npm\n * as a peer dependency.\n */\nexport async function defaultPyodideLoader(version: string = npmVersion): Promise<PyodideInterface> {\n  const indexURL = `https://cdn.jsdelivr.net/pyodide/v${version}/full/`;\n  const result = await loadPyodide({indexURL});\n  if (result.version !== version) {\n    throw new Error(\n      `loadPyodide loaded version ${result.version} instead of ${version}`,\n    );\n  }\n  return result;\n}\n\n/**\n * Converts a version string to an array of numbers,\n * e.g. \"1.2.3\" -> [1, 2, 3]\n */\nexport function versionInfo(version: string): number[] {\n  return version.split(\".\").map(Number);\n}\n\n/**\n * Loads Pyodide in parallel to downloading an archive with your own code and dependencies,\n * which it then unpacks into the virtual filesystem ready for you to import.\n *\n * This helps you to work with Python code normally with several `.py` files\n * instead of a giant string passed to Pyodide's `runPython`.\n * It also lets you start up more quickly instead of waiting for Pyodide to load\n * before calling `loadPackage` or `micropip.install`.\n *\n * The archive should contain your own Python files and any Python dependencies.\n * A simple way to gather Python dependencies into a folder is with `pip install -t <folder>`.\n * The location where the archive is extracted will be added to `sys.path` so it can be imported immediately,\n * e.g. with [`pyodide.pyimport`](https://pyodide.org/en/stable/usage/api/js-api.html#pyodide.pyimport).\n * There should be no top-level folder in the archive containing everything else,\n * or that's what you'll have to import.\n *\n * If you don't use `loadPyodideAndPackage` and just load Pyodide yourself,\n * then we recommend passing the resulting module object to `initPyodide` for some other housekeeping.\n *\n * Loading of both Pyodide and the package is retried up to 3 times in case of network errors.\n *\n * The raw contents of the package are cached in memory to avoid re-downloading in case of\n * a fatal error which requires reloading Pyodide.\n *\n * @param packageOptions Object which describes how to load the package file, with the following keys:\n *    - `url`: URL to fetch the package from.\n *    - `format`: File format which determines how to extract the archive.\n *                By default the options are 'bztar', 'gztar', 'tar', 'zip', and 'wheel'.\n *    - `extractDir`: Directory to extract the archive into. Defaults to /tmp/.\n * @param pyodideLoader Optional function which takes no arguments and returns the Pyodide module as returned by the\n *    [`loadPyodide`](https://pyodide.org/en/stable/usage/api/js-api.html#globalThis.loadPyodide) function.\n *    Defaults to `defaultPyodideLoader`which uses the\n *    [official CDN](https://pyodide.org/en/stable/usage/quickstart.html#setup).\n */\nexport async function loadPyodideAndPackage(\n  packageOptions: PackageOptions,\n  pyodideLoader: PyodideLoader = defaultPyodideLoader,\n) : Promise<PyodideInterface> {\n  let {format, extractDir, url} = packageOptions;\n  extractDir = extractDir || \"/tmp/\";\n\n  let pyodide: PyodideInterface;\n  let packageBuffer: ArrayBuffer;\n  [pyodide, packageBuffer] = await Promise.all([\n    pRetry(() => pyodideLoader(), {retries: 3}),\n    pRetry(() => getPackageBuffer(url), {retries: 3}),\n  ]);\n\n  const vInfo = versionInfo(pyodide.version);\n  pyodide.unpackArchive(\n    packageBuffer,\n    format,\n    vInfo[0] === 0 && vInfo[1] <= 19 ? (extractDir as any) : {extractDir},\n  );\n\n  const sys = pyodide.pyimport(\"sys\");\n  sys.path.append(extractDir);\n\n  initPyodide(pyodide);\n\n  return pyodide;\n}\n\n/**\n * Initializes the given Pyodide module with some extra functionality:\n *   - `pyodide.registerComlink(Comlink)` makes `Comlink` (and thus `comsync` and the `PyodideClient`) work better.\n *   - Imports the `pyodide_worker_runner` Python module included with this library, which:\n *     - Immediately calls `sys.setrecursionlimit` so that deep recursion causes a Python `RecursionError`\n *       instead of a fatal JS `RangeError: Maximum call stack size exceeded`.\n *     - Provides the `install_imports` function which allows automatically installing imported modules, similar to\n *       [`loadPackagesFromImports`](https://pyodide.org/en/stable/usage/api/js-api.html#pyodide.loadPackagesFromImports)\n *       but also loads packages which are not built into Pyodide but can be installed with `micropip`,\n *       i.e. pure Python packages with wheels available on PyPI.\n */\nexport function initPyodide(pyodide: PyodideInterface) {\n  pyodide.registerComlink(Comlink);\n\n  const sys = pyodide.pyimport(\"sys\");\n  const pathlib = pyodide.pyimport(\"pathlib\");\n\n  const dirPath = \"/tmp/pyodide_worker_runner/\";\n  sys.path.append(dirPath);\n  pathlib.Path(dirPath).mkdir();\n  pathlib\n    .Path(dirPath + \"pyodide_worker_runner.py\")\n    .write_text(pyodide_worker_runner_contents);\n  pyodide.pyimport(\"pyodide_worker_runner\");\n}\n\nconst packageCache = new Map<string, ArrayBuffer>();\n\nasync function getPackageBuffer(url: string) {\n  if (packageCache.has(url)) {\n    console.log(\"Loaded package from cache\");\n    return packageCache.get(url);\n  }\n  console.log(\"Fetching package from \" + url.slice(0, 100) + \"...\");\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\n      `Request for package failed with status ${response.status}: ${response.statusText}`,\n    );\n  }\n  const result = await response.arrayBuffer();\n  console.log(\"Fetched package\");\n  packageCache.set(url, result);\n  return result;\n}\n\n/**\n * See the description of output parts in\n * https://github.com/alexmojaki/python_runner#callback-events\n */\nexport interface OutputPart {\n  type: string;\n  text: string;\n  [key: string]: unknown;\n}\n\nexport interface RunnerCallbacks {\n  input?: (prompt: string) => void;\n  output: (parts: OutputPart[]) => unknown;\n  other?: (type: string, data: unknown) => unknown;\n}\n\n/**\n * Construct a callback function which can be passed to `python_runner` to handle events.\n * See https://github.com/alexmojaki/python_runner#callback-events\n *\n * @param comsyncExtras\n *    In a web worker script, you need to pass a function to `pyodideExpose` from this library.\n *    That function will be passed `extras` as its first argument which can then be used here.\n *    `extras` is expected to contain a `channel` created by the `makeChannel` function from\n *    the [`sync-message`](https://github.com/alexmojaki/sync-message) library\n *    which was then passed to `PyodideClient` in the main thread.\n *    This enables synchronous communication between the main thread and the worker,\n *    which is used by the callback to handle `input` and `sleep` events properly.\n *    See https://github.com/alexmojaki/pyodide-worker-runner#comsync-integration for more info.\n * @param callbacks\n *    An object containing callback functions to handle the different event types.\n *      - `output`: Required. Called with an array of output parts,\n *         e.g. `[{type: \"stdout\", text: \"Hello world\"}]`.\n *         Use this to tell your UI to display the output.\n *      - `input`: Optional. Called when the Python code reads from `sys.stdin`, e.g. with `input()`.\n *         Use this to tell your UI to wait for the user to enter some text.\n *         The entered text should be passed to `PyodideClient.writeMessage()` in the main thread,\n *         and will be returned synchronously by this function to the Python code.\n *         When the Python code calls `input(prompt)`, the string `prompt` is passed to this callback.\n *         Two types of output part will also be passed to the `output` callback:\n *             - `input_prompt`: the prompt passed to the `input()` function.\n *               Using this output part may be a better way to display the prompt in the UI\n *               than the argument of the `input` callback, but the `input` callback is still needed\n *               even if it doesn't display the prompt.\n *              - `input`: the user's input passed to stdin.\n *                Not actually 'output', but included as an output part\n *                because it's typically shown in regular Python consoles.\n *      - `other`: Optional. Called for all other event types\n *        (except `sleep` which is handled directly by `makeRunnerCallback`).\n *        The actual event type is passed as the first argument.\n */\nexport function makeRunnerCallback(\n  comsyncExtras: SyncExtras,\n  callbacks: RunnerCallbacks,\n) {\n  return function (type: string, data: any) {\n    if (data.toJs) {\n      data = data.toJs({dict_converter: Object.fromEntries});\n    }\n\n    if (type === \"input\") {\n      callbacks.input && callbacks.input(data.prompt);\n      return comsyncExtras.readMessage() + \"\\n\";\n    } else if (type === \"sleep\") {\n      comsyncExtras.syncSleep(data.seconds * 1000);\n    } else if (type === \"output\") {\n      return callbacks.output(data.parts);\n    } else {\n      return callbacks.other(type, data);\n    }\n  };\n}\n\nexport interface PyodideExtras extends SyncExtras {\n  interruptBuffer: Int32Array | null;\n}\n\n/**\n * Call this in your web worker code with a function `func`\n * to allow it to be called from the main thread by `PyodideClient.call`.\n *\n * `func` will be called with an object `extras` of type `PyodideExtras` as its first argument.\n * The other arguments are those passed to `PyodideClient.call`,\n * and the return value is passed back to the main thread and returned from `PyodideClient.call`.\n *\n * `func` will be wrapped into a new function which is returned here.\n * The returned function should be passed to `Comlink.expose`, possibly as part of a larger object.\n *\n * For example, the worker code may look something like this:\n *\n *     Comlink.expose({\n *       myRunCode: pyodideExpose((extras, code) => {\n *         pyodide.runCode(code);\n *       }),\n *     });\n *\n * and the main thread code may look something like this:\n *\n *    await client.call(client.workerProxy.myRunCode, \"print('Hello world')\");\n *\n * It's recommended to pass `extras` to `makeRunnerCallback` and then pass the resulting callback\n * to a `python_runner.PyodideRunner` instead of calling `pyodide.runCode` directly.\n *\n * If possible, `extras.interruptBuffer` will be a `SharedArrayBuffer` which can be used like this:\n *\n *     if (extras.interruptBuffer) {\n *       pyodide.setInterruptBuffer(extras.interruptBuffer);\n *     }\n *\n * This will allow the main thread to call `PyodideClient.interrupt()`\n * to raise `KeyboardInterrupt` in Python code running in Pyodide in the worker thread.\n * `setInterruptBuffer` isn't called automatically so that you can choose the correct place to call it,\n * after running any Python code that musn't be interrupted.\n */\nexport function pyodideExpose<T extends any[], R>(\n  func: (extras: PyodideExtras, ...args: T) => R,\n) {\n  return syncExpose(async function (\n    comsyncExtras: SyncExtras,\n    interruptBuffer: Int32Array | null,\n    ...args: T\n  ): Promise<R> {\n    return func({...comsyncExtras, interruptBuffer}, ...args);\n  });\n}\n\n/**\n * This class should be used in the main browser thread\n * to call functions exposed with `pyodideExpose` and `Comlink.expose` in a web worker.\n * See https://github.com/alexmojaki/comsync to learn how to use the base class `SyncClient`.\n * What this class adds is making it easier to interrupt Python code running in Pyodide in the worker.\n * Specifically, if `SharedArrayBuffer` is available, then `PyodideClient.call` will pass a buffer\n * so that the function passed to `pyodideExpose` can call `pyodide.setInterruptBuffer(extras.interruptBuffer)`\n * to enable interruption. Then `PyodideClient.interrupt()` will use the buffer.\n * Otherwise, `PyodideClient.interrupt()` will likely restart the web worker entirely, which is more disruptive.\n */\nexport class PyodideClient<T = any> extends SyncClient<T> {\n  async call(proxyMethod: any, ...args: any[]) {\n    let interruptBuffer: Int32Array | null = null;\n    if (typeof SharedArrayBuffer !== \"undefined\") {\n      interruptBuffer = new Int32Array(\n        new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 1),\n      );\n      this.interrupter = () => {\n        interruptBuffer[0] = 2;\n      };\n    }\n\n    return super.call(proxyMethod, interruptBuffer, ...args);\n  }\n}\n\n/**\n * This class handles automatically reloading Pyodide from scratch when a fatal error occurs.\n * The constructor accepts a 'loader' function which should return a promise that resolves to a Pyodide module.\n * We recommend a function which calls `loadPyodideAndPackage`.\n * The loader function will be called immediately on construction.\n *\n * Code that uses the Pyodide module should be wrapped in a `withPyodide` call, e.g:\n *\n *    await pyodideFatalErrorReloader.withPyodide(async (pyodide) => {\n *      pyodide.runCode(...);\n *    });\n *\n * If a fatal error occurs, the loader function will be called again immediately to reload Pyodide in the background,\n * while the error is rethrown for you to handle.\n * The next call to `withPyodide` will then be able to use the new Pyodide instance.\n *\n * In general, `withPyodide` will wait for the loader function to complete, and will throw any errors it throws.\n */\nexport class PyodideFatalErrorReloader {\n  private pyodidePromise: Promise<PyodideInterface>;\n\n  constructor(private readonly loader: PyodideLoader) {\n    this.pyodidePromise = loader();\n  }\n\n  public async withPyodide<T>(\n    fn: (pyodide: PyodideInterface) => Promise<T>,\n  ): Promise<T> {\n    const pyodide = await this.pyodidePromise;\n    try {\n      return await fn(pyodide);\n    } catch (e) {\n      if (e.pyodide_fatal_error) {\n        this.pyodidePromise = this.loader();\n      }\n      throw e;\n    }\n  }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__422__","__WEBPACK_EXTERNAL_MODULE__272__","__WEBPACK_EXTERNAL_MODULE__28__","RetryOperation","operation","options","timeouts","forever","retries","Infinity","unref","maxRetryTime","Array","concat","opts","factor","minTimeout","maxTimeout","randomize","key","Error","i","push","this","createTimeout","length","sort","a","b","attempt","random","Math","timeout","round","max","pow","min","wrap","obj","methods","method","original","op","args","prototype","slice","call","arguments","callback","pop","err","retry","mainError","apply","bind","_originalTimeouts","JSON","parse","stringify","_timeouts","_options","_maxRetryTime","_fn","_errors","_attempts","_operationTimeout","_operationTimeoutCb","_timeout","_operationStart","_timer","_cachedTimeouts","reset","stop","clearTimeout","currentTime","Date","getTime","unshift","shift","undefined","splice","setTimeout","fn","timeoutOps","cb","try","console","log","start","errors","attempts","counts","mainErrorCount","error","message","count","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","prop","hasOwnProperty","r","Symbol","toStringTag","value","networkErrorMsgs","Set","AbortError","constructor","super","originalError","stack","name","getDOMException","errorMessage","globalThis","DOMException","async","pRetry","input","Promise","resolve","reject","onFailedAttempt","attemptNumber","TypeError","has","retriesLeft","decorateErrorWithCounts","signal","aborted","addEventListener","reason","once","pyodide_worker_runner_contents","defaultPyodideLoader","version","indexURL","result","loadPyodide","versionInfo","split","map","Number","loadPyodideAndPackage","packageOptions","pyodideLoader","pyodide","packageBuffer","format","extractDir","url","all","packageCache","response","fetch","ok","status","statusText","arrayBuffer","set","getPackageBuffer","vInfo","unpackArchive","pyimport","path","append","initPyodide","registerComlink","sys","pathlib","dirPath","Path","mkdir","write_text","Map","makeRunnerCallback","comsyncExtras","callbacks","type","data","toJs","dict_converter","fromEntries","prompt","readMessage","output","parts","other","syncSleep","seconds","pyodideExpose","func","syncExpose","interruptBuffer","PyodideClient","SyncClient","proxyMethod","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","interrupter","PyodideFatalErrorReloader","loader","pyodidePromise","withPyodide","e","pyodide_fatal_error"],"sourceRoot":""}